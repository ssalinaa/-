Ето един пример за използване на typedef в C++:

typedef double RealNumber;

class Circle {
private:
    RealNumber radius;

public:
    Circle(RealNumber r) {
        radius = r;
    }

    RealNumber getArea() {
        return 3.14 * radius * radius;
    }
};

int main() {
    Circle c(5.0);
    RealNumber area = c.getArea();
    std::cout << "Area of circle: " << area << std::endl;
    return 0;
}

Тук предефинираме double като RealNumber. След това дефинираме клас Circle, който има член-променлива radius от тип RealNumber.
Класът има метод getArea(), който изчислява площта на кръга.

В main функцията създаваме обект от класа Circle с радиус 5 и извеждаме площта му на екрана.

Този пример илюстрира как може да се използва typedef за удобство и четливост на кода. 
Вместо да използваме double навсякъде, където искаме да използваме реално число, използваме RealNumber, което прави кода по-четим и по-лесен за разбиране.


Ето още един пример за използване на typedef, този път за дефиниране на указател към функция в C:

typedef int (*Operation)(int, int);

int add(int x, int y) {
    return x + y;
}

int subtract(int x, int y) {
    return x - y;
}

int calculate(Operation op, int x, int y) {
    return op(x, y);
}

int main() {
    int x = 10, y = 5;
    Operation op;

    op = add;
    int result = calculate(op, x, y);
    std::cout << "Result of add: " << result << std::endl;

    op = subtract;
    result = calculate(op, x, y);
    std::cout << "Result of subtract: " << result << std::endl;

    return 0;
}

Тук предефинираме типа на указател към функция като Operation. 
Този тип указател може да сочи към функция, която приема два целочислени аргумента и връща резултат от тип int.

Създаваме две функции, add() и subtract(), които извършват съответно събиране и изваждане на две числа.

Дефинираме функцията calculate(), която приема указател към функция от тип Operation, както и две целочислени аргумента. 
Функцията връща резултата от извикването на функцията, сочена от указателя op, с аргументите x и y.

В main функцията дефинираме променлива от тип Operation и я инициализираме с указател към функцията add().
След това извикваме функцията calculate() с указателя и двата целочислени аргумента. Аналогично правим и с функцията subtract(). 
Резултатите от двете операции извеждаме на екрана.

Този пример илюстрира как може да се използва typedef за дефиниране на по-абстрактни типове и по-лесно използване на функции, които приемат указатели към функции.


В C и C++ можем да използваме typedef за предефиниране на типове, които включват указатели. Ето един пример:

typedef int* IntPointer;

int main() {
    int x = 10;
    IntPointer ptr = &x;

    std::cout << "Value of x: " << x << std::endl;
    std::cout << "Value of ptr: " << *ptr << std::endl;

    *ptr = 20;
    std::cout << "New value of x: " << x << std::endl;

    return 0;
}


Тук предефинираме типа int* като IntPointer. Това ни позволява да използваме IntPointer като тип на променливи, които са указатели към цели числа.

В main функцията дефинираме целочислена променлива x със стойност 10. Създаваме указател ptr от тип IntPointer и го инициализираме с адреса на x.

Извеждаме стойностите на x и *ptr на екрана. Забележете, че *ptr дава стойността на x, защото ptr е указател към x.

Променяме стойността на x, като използваме *ptr. След това извеждаме новата стойност на x на екрана.

Този пример илюстрира как можем да използваме typedef за предефиниране на типове, които включват указатели, за по-лесно и четимо използване на указатели в програмите.


В C++11 и по-новите версии на C++ можем да използваме ключовата дума using за предефиниране на типове, включително типове, които включват указатели. Ето един пример:

using IntPointer = int*;

int main() {
    int x = 10;
    IntPointer ptr = &x;

    std::cout << "Value of x: " << x << std::endl;
    std::cout << "Value of ptr: " << *ptr << std::endl;

    *ptr = 20;
    std::cout << "New value of x: " << x << std::endl;

    return 0;
}

Тук предефинираме типа int* като IntPointer с помощта на ключовата дума using. 
Това ни позволява да използваме IntPointer като тип на променливи, които са указатели към цели числа.

В main функцията дефинираме целочислена променлива x със стойност 10.
Създаваме указател ptr от тип IntPointer и го инициализираме с адреса на x.

Извеждаме стойностите на x и *ptr на екрана. Забележете, че *ptr дава стойността на x, защото ptr е указател към x.

Променяме стойността на x, като използваме *ptr. След това извеждаме новата стойност на x на екрана.

Този пример илюстрира как можем да използваме ключовата дума using за предефиниране на типове,
включително типове, които включват указатели, за по-лесно и четимо използване на указатели в програмите.

Ето още един пример за предефиниране на типове чрез using с указатели:

#include <iostream>
using CharPointer = char*;

void print(const CharPointer str) {
    std::cout << str << std::endl;
}

int main() {
    CharPointer ptr = "Hello, world!";

    print(ptr);

    return 0;
}

В този пример дефинираме функцията print, която приема указател към символен низ от тип CharPointer. Функцията извежда низа на екрана.

В main функцията дефинираме указател ptr от тип CharPointer и го инициализираме със символен низ "Hello, world!".

Извикваме функцията print с указателя ptr, която извежда низа на екрана.

Този пример показва как можем да използваме using за предефиниране на типове с указатели, за да улесним работата с указателите в програмите.
